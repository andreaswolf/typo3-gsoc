<?php

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2011 Andreas Wolf <andreas.wolf@ikt-werk.de>
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *  A copy is found in the textfile GPL.txt and important notices to the license
 *  from the author is found in LICENSE.txt distributed with these scripts.
 *
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/


/**
 * Exporter for record data.
 *
 * @author Andreas Wolf <andreas.wolf@ikt-werk.de>
 * @package TYPO3
 * @subpackage Tx_RdfExport
 */
class Tx_RdfExport_DataExporter extends Tx_RdfExport_AbstractExporter {

	protected $dataStructure;

	/**
	 * Maps a record to RDF statements. 
	 *
	 * @param t3lib_TCEforms_Record $recordObject
	 * @return array The statements generated by the mapping
	 */
	public function exportRecord(t3lib_TCEforms_Record $recordObject) {
		$this->statements = array();

			// TODO respect record type here
			// TODO get field list from record type (and also respect fields that are not displayed in TCEforms)
		$dataStructure = $recordObject->getDataStructure();
		$recordData = $recordObject->getRecordData();
		$fieldNames = $dataStructure->getFieldNames();
		$recordIdentifier = Tx_RdfExport_Helper::getRdfIdentifierForRecord($recordObject->getTable(), $recordObject->getUid());

		foreach ($fieldNames as $fieldName) {
			$fieldObject = $dataStructure->getFieldObject($fieldName);

			try {
				$statements = $this->columnMapper->mapFieldValueToStatement($fieldObject, $recordData[$fieldName], $recordIdentifier);
				$this->addMultipleStatements($statements);
			} catch (Exception $e) {
				// TODO display error
			}
		}

		return $this->statements;
	}
}
